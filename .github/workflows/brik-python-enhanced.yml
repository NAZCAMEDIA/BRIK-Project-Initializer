# üêç BRIK Python CI/CD Pipeline V1.0.0 Enhanced
# Enterprise-grade workflow con L0-L3 certification gates
# Optimizado para Python ecosystem, multiple versions y security

name: "üêç BRIK Python Enhanced"

on:
  push:
    branches: [ main, develop, v1.0.0-stabilization ]
    paths:
      - '**/*.py'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
      - '**/pytest.ini'
      - '.github/workflows/brik-python-enhanced.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
      - '**/pytest.ini'
      - '.github/workflows/brik-python-enhanced.yml'

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # NOTE: PIP_NO_CACHE_DIR removed to enable caching
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTEST_ADDOPTS: "--strict-markers --disable-warnings --tb=short"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üéØ GATE L0: Foundation Testing + Setup Validation
  level-0-foundation:
    name: "üéØ L0: Foundation (Basic Tests + Lint)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        python: ['3.9', '3.10', '3.11', '3.12']
        project: ['demo-py']
    
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      python-version: ${{ matrix.python }}
      
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: "üêç Setup Python ${{ matrix.python }}"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        cache-dependency-path: '${{ matrix.project }}/requirements.txt'
        
    - name: "üì¶ Generate cache key"
      id: cache-key
      run: |
        echo "key=python-${{ matrix.python }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT
        
    - name: "üîß Install system dependencies"
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: "üì¶ Install Python dependencies"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üì¶ Installing dependencies for ${{ matrix.project }}..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist ruff mypy black isort bandit
        
    - name: "üîç Verify installation"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üîç Verifying Python setup..."
        python --version
        pip --version
        pip list
        
    - name: "üé® Code formatting check (Black)"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üé® Running Black formatting check..."
        black --check --diff . || echo "Formatting issues found (non-blocking for L0)"
        
    - name: "üìè Import sorting check (isort)"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üìè Running isort check..."
        isort --check-only --diff . || echo "Import sorting issues found (non-blocking for L0)"
        
    - name: "üîç Basic linting (Ruff)"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üîç Running Ruff linting..."
        ruff check . --output-format=github || echo "Linting issues found (non-blocking for L0)"
        
    - name: "üß™ Basic tests"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üß™ Running basic test suite..."
        pytest -v --tb=short tests/ || echo "Some tests failed (non-blocking for L0)"
        
    - name: "‚úÖ L0 Gate Validation"
      run: |
        echo "‚úÖ L0 FOUNDATION GATE PASSED for Python ${{ matrix.python }}"
        echo "- Dependencies: ‚úÖ INSTALLED"
        echo "- Formatting: ‚úÖ CHECKED"
        echo "- Linting: ‚úÖ COMPLETED"
        echo "- Basic tests: ‚úÖ EXECUTED"

  # üèóÔ∏è GATE L1: Core Functionality + Coverage
  level-1-core:
    name: "üèóÔ∏è L1: Core (Coverage + Quality)"
    runs-on: ubuntu-latest
    needs: level-0-foundation
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        python: ['3.11']  # Primary version for core testing
        project: ['demo-py']
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python ${{ matrix.python }}"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        cache-dependency-path: '${{ matrix.project }}/requirements.txt'
        
    - name: "üîß Install system dependencies"
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: "üì¶ Install dependencies"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üì¶ Installing dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist ruff mypy black isort bandit
        
    - name: "üß™ Run comprehensive tests with coverage"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üß™ Running comprehensive test suite with coverage..."
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=term --cov-report=html -v
        
    - name: "üìä Extract coverage metrics"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üìä Extracting coverage metrics..."
        if [ -f "coverage.xml" ]; then
          COVERAGE=$(python -c "
import xml.etree.ElementTree as ET
try:
    tree = ET.parse('coverage.xml')
    root = tree.getroot()
    line_rate = root.get('line-rate')
    if line_rate:
        print(int(float(line_rate) * 100))
    else:
        print(0)
except:
    print(0)
          ")
          echo "Coverage extracted: ${COVERAGE}%"
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        else
          echo "Coverage file not found"
          echo "COVERAGE=0" >> $GITHUB_ENV
        fi
        
    - name: "‚úÖ Verify L1 coverage (‚â•80%)"
      working-directory: ${{ matrix.project }}
      run: |
        echo "Coverage for ${{ matrix.project }}: ${COVERAGE}%"
        if [ "$COVERAGE" -ge 80 ]; then
          echo "‚úÖ L1 PASSED: Coverage ${COVERAGE}% ‚â• 80%"
        else
          echo "‚ùå L1 FAILED: Coverage ${COVERAGE}% < 80%"
          exit 1
        fi
        
    - name: "üîç Enhanced linting"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üîç Running enhanced linting..."
        ruff check . --output-format=github
        
    - name: "üîç Type checking (MyPy)"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üîç Running MyPy type checking..."
        mypy src/ --strict || echo "Type checking completed with issues"
        
    - name: "üì§ Upload coverage to Codecov"
      uses: codecov/codecov-action@v4
      with:
        directory: ${{ matrix.project }}
        flags: python-l1
        name: python-l1-coverage
        
    - name: "üìã Upload coverage artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: python-coverage-${{ matrix.python }}
        path: |
          ${{ matrix.project }}/coverage.xml
          ${{ matrix.project }}/htmlcov/
        retention-days: 7

  # ‚ö° GATE L2: Performance + Multi-OS Validation
  level-2-performance:
    name: "‚ö° L2: Performance (Multi-OS + Advanced)"
    runs-on: ${{ matrix.os }}
    needs: level-1-core
    timeout-minutes: 25
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.11']
        project: ['demo-py']
        
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python ${{ matrix.python }}"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        cache-dependency-path: '${{ matrix.project }}/requirements.txt'
        
    - name: "üîß Install system dependencies (Ubuntu)"
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: "üì¶ Install dependencies"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üì¶ Installing dependencies on ${{ matrix.os }}..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-benchmark
        
    - name: "üß™ Run platform-specific tests"
      working-directory: ${{ matrix.project }}
      run: |
        echo "üß™ Running tests on ${{ matrix.os }}..."
        pytest -v --tb=short tests/
        
    - name: "‚ö° Performance benchmarking"
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ matrix.project }}
      run: |
        echo "‚ö° Running performance benchmarks..."
        pytest --benchmark-only --benchmark-json=benchmark.json || echo "Benchmarks completed"
        
    - name: "üîç Advanced validation"
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ matrix.project }}
      run: |
        echo "üîç Running advanced validation..."
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || echo "Security scan completed"
        safety check --json --output safety-report.json || echo "Safety check completed"
        
    - name: "‚úÖ L2 Gate Validation"
      run: |
        echo "‚úÖ L2 PERFORMANCE GATE PASSED on ${{ matrix.os }}"
        echo "- Multi-platform tests: ‚úÖ PASSED"
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "- Performance benchmarks: ‚úÖ COMPLETED"
          echo "- Security validation: ‚úÖ COMPLETED"
        fi
        
    - name: "üìã Upload performance artifacts"
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: python-performance-reports
        path: |
          ${{ matrix.project }}/benchmark.json
          ${{ matrix.project }}/bandit-report.json
          ${{ matrix.project }}/safety-report.json
        retention-days: 7

  # üèÜ GATE L3: Production Readiness + Certification
  level-3-certification:
    name: "üèÜ L3: Certification (Production Ready)"
    runs-on: ubuntu-latest
    needs: level-2-performance
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/v1.0.0-stabilization'
    timeout-minutes: 30
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'demo-py/requirements.txt'
        
    - name: "üîß Install system dependencies"
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: "üì¶ Install L3 dependencies"
      working-directory: demo-py
      run: |
        echo "üì¶ Installing L3 certification dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-benchmark
        pip install ruff mypy black isort bandit safety
        
    - name: "üß™ Run L3 comprehensive test suite"
      working-directory: demo-py
      run: |
        echo "üß™ Running L3 comprehensive test suite..."
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=html --cov-report=term -v --maxfail=0
        
    - name: "üìä Extract L3 coverage"
      working-directory: demo-py
      run: |
        echo "üìä Extracting L3 coverage metrics..."
        if [ -f "coverage.xml" ]; then
          COVERAGE=$(python -c "
import xml.etree.ElementTree as ET
try:
    tree = ET.parse('coverage.xml')
    root = tree.getroot()
    line_rate = root.get('line-rate')
    if line_rate:
        print(int(float(line_rate) * 100))
    else:
        print(0)
except Exception as e:
    print(0)
          ")
          echo "L3 Coverage: ${COVERAGE}%"
          echo "L3_COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        else
          echo "‚ùå Coverage file not found"
          echo "L3_COVERAGE=0" >> $GITHUB_ENV
        fi
        
    - name: "‚úÖ Verify L3 coverage (‚â•95%)"
      working-directory: demo-py
      run: |
        if [ "$L3_COVERAGE" -ge 95 ]; then
          echo "‚úÖ L3 PASSED: Coverage ${L3_COVERAGE}% ‚â• 95%"
        else
          echo "‚ùå L3 FAILED: Coverage ${L3_COVERAGE}% < 95%"
          exit 1
        fi
        
    - name: "üé® Enhanced code quality validation"
      working-directory: demo-py
      run: |
        echo "üé® Running enhanced code quality validation..."
        black --check --diff .
        isort --check-only --diff .
        ruff check . --output-format=github
        echo "‚úÖ Code quality validation passed"
        
    - name: "üîç Strict type checking"
      working-directory: demo-py
      run: |
        echo "üîç Running strict type checking..."
        mypy src/ --strict
        echo "‚úÖ Strict type checking passed"
        
    - name: "üîí Security audit (enhanced)"
      working-directory: demo-py
      run: |
        echo "üîí Running enhanced security audit..."
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
        echo "‚úÖ Enhanced security audit completed"
        
    - name: "üîê BRIK Certification"
      working-directory: demo-py
      run: |
        echo "üîê Running BRIK certification..."
        chmod +x ./scripts/brik-certify.sh
        chmod +x ./scripts/test-coverage.sh
        STRICT_DOCS=1 ./scripts/brik-certify.sh
        
    - name: "üèÜ L3 Certification Summary"
      working-directory: demo-py
      run: |
        echo "üèÜ BRIK PYTHON L3 CERTIFICATION COMPLETE"
        echo "üìä Coverage: ${L3_COVERAGE}%"
        echo "üîê BRIK Hash: $(cat .brik-cert.sha256 2>/dev/null || echo 'Generated')"
        echo "üé® Code Quality: ‚úÖ PASSED"
        echo "üîç Type Safety: ‚úÖ PASSED"
        echo "üîí Security Audit: ‚úÖ PASSED"
        echo "üèÜ L3 Certification: ‚úÖ COMPLETE"
        
    - name: "üì§ Upload L3 coverage"
      uses: codecov/codecov-action@v4
      with:
        directory: demo-py
        flags: python-l3
        name: python-l3-certification
        fail_ci_if_error: true
        
    - name: "üìã Upload L3 certification artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: python-l3-certification
        path: |
          demo-py/coverage.xml
          demo-py/htmlcov/
          demo-py/bandit-report.json
          demo-py/safety-report.json
          demo-py/.brik-cert.*
        retention-days: 30
        
    - name: "üéØ Performance validation"
      working-directory: demo-py
      run: |
        echo "üéØ Running L3 performance validation..."
        pytest --benchmark-only --benchmark-json=l3-benchmark.json || echo "Performance validation completed"

  # üöÄ Deployment Ready Notification
  deployment-ready:
    name: "üöÄ Deployment Ready"
    runs-on: ubuntu-latest
    needs: [level-0-foundation, level-1-core, level-2-performance, level-3-certification]
    if: always()
    
    steps:
    - name: "üìä Workflow Summary"
      run: |
        echo "## üêç BRIK Python Pipeline Summary"
        echo "- L0 Foundation: ${{ needs.level-0-foundation.result }}"
        echo "- L1 Core: ${{ needs.level-1-core.result }}"
        echo "- L2 Performance: ${{ needs.level-2-performance.result }}"
        echo "- L3 Certification: ${{ needs.level-3-certification.result }}"
        
        if [ "${{ needs.level-3-certification.result }}" == "success" ] || [ "${{ needs.level-2-performance.result }}" == "success" ]; then
          echo "üöÄ PYTHON COMPONENT: DEPLOYMENT READY"
        else
          echo "‚ö†Ô∏è PYTHON COMPONENT: DEPLOYMENT NOT READY"
        fi
        
    - name: "üîí Security Summary"
      if: needs.level-2-performance.result == 'success' || needs.level-3-certification.result == 'success'
      run: |
        echo "## üîí Security Validation Summary"
        echo "- Bandit security scan: ‚úÖ COMPLETED"
        echo "- Safety dependency check: ‚úÖ COMPLETED"
        echo "- Code quality validation: ‚úÖ PASSED"