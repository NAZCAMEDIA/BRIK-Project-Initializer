# üêç BRIK Python CI/CD Pipeline
# Niveles de Certificaci√≥n: L0‚ÜíL1‚ÜíL2‚ÜíL3
# Fleet-Coordinator: Workflow optimizado para m√°xima calidad

name: "üêç BRIK Python"

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
      - '.github/workflows/brik-py.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
      - '.github/workflows/brik-py.yml'

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # NOTE: PIP_NO_CACHE_DIR removed to enable caching with setup-python@v5
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  # üéØ GATE L0: Tests B√°sicos + Cobertura ‚â•70%
  level-0-basic:
    name: "üéØ L0: Basic Tests (‚â•70% coverage)"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12']
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
        
    - name: "üß™ Run tests"
      working-directory: demo-py
      run: |
        pytest -v --tb=short
        
    - name: "üìä Generate coverage report"
      working-directory: demo-py
      run: |
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=term
        
    - name: "‚úÖ Verify L0 coverage (‚â•70%)"
      working-directory: demo-py
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))" | awk '{print $1*100}')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= 70.0" | bc -l) )); then
          echo "‚úÖ L0 PASSED: Coverage $COVERAGE% ‚â• 70%"
        else
          echo "‚ùå L0 FAILED: Coverage $COVERAGE% < 70%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      if: matrix.python == '3.11'
      uses: codecov/codecov-action@v4
      with:
        directory: demo-py
        flags: python-l0
        name: python-l0-coverage

  # üîç GATE L1: Lint + Typecheck + Cobertura ‚â•80%  
  level-1-lint:
    name: "üîç L1: Lint + Typecheck (‚â•80% coverage)"
    runs-on: ubuntu-latest
    needs: level-0-basic
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy black isort pytest-cov
        
    - name: "üé® Check code formatting (Black)"
      working-directory: demo-py
      run: |
        black --check --diff .
        
    - name: "üìè Import sorting (isort)"
      working-directory: demo-py
      run: |
        isort --check-only --diff .
        
    - name: "üîç Ruff linting"
      working-directory: demo-py
      run: |
        ruff check . --output-format=github
        
    - name: "üîç MyPy type checking"
      working-directory: demo-py
      run: |
        mypy src/ --strict
        
    - name: "üìä Generate coverage report L1"
      working-directory: demo-py
      run: |
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=term
        
    - name: "‚úÖ Verify L1 coverage (‚â•80%)"
      working-directory: demo-py
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))" | awk '{print $1*100}')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= 80.0" | bc -l) )); then
          echo "‚úÖ L1 PASSED: Coverage $COVERAGE% ‚â• 80%"
        else
          echo "‚ùå L1 FAILED: Coverage $COVERAGE% < 80%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      uses: codecov/codecov-action@v4
      with:
        directory: demo-py
        flags: python-l1
        name: python-l1-coverage

  # üèóÔ∏è GATE L2: CI Completo + Docs + Cobertura ‚â•90%
  level-2-complete:
    name: "üèóÔ∏è L2: Complete CI + Docs (‚â•90% coverage)"
    runs-on: ubuntu-latest
    needs: level-1-lint
    
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist sphinx sphinx-rtd-theme
        
    - name: "üß™ Run comprehensive tests"
      working-directory: demo-py
      run: |
        pytest -v --tb=short -n auto
        
    - name: "üìö Generate documentation"
      if: matrix.python == '3.11' && matrix.os == 'ubuntu-latest'
      working-directory: demo-py
      run: |
        sphinx-build -b html docs/ docs/_build/html/
        
    - name: "üîç Security check (Bandit)"
      if: matrix.python == '3.11' && matrix.os == 'ubuntu-latest'
      working-directory: demo-py
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: "üìä Generate coverage report L2"
      if: matrix.python == '3.11' && matrix.os == 'ubuntu-latest'
      working-directory: demo-py
      run: |
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=html --cov-report=term
        
    - name: "‚úÖ Verify L2 coverage (‚â•90%)"
      if: matrix.python == '3.11' && matrix.os == 'ubuntu-latest'
      working-directory: demo-py
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))" | awk '{print $1*100}')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= 90.0" | bc -l) )); then
          echo "‚úÖ L2 PASSED: Coverage $COVERAGE% ‚â• 90%"
        else
          echo "‚ùå L2 FAILED: Coverage $COVERAGE% < 90%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      if: matrix.python == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: demo-py
        flags: python-l2
        name: python-l2-coverage

  # üèÜ GATE L3: Contract Tests + BRIK Hash + Cobertura 100%
  level-3-certification:
    name: "üèÜ L3: BRIK Certification (100% coverage)"
    runs-on: ubuntu-latest
    needs: level-2-complete
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "üêç Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-py
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
        
    - name: "üß™ Run contract tests"
      run: |
        if [ -f "tests/contract/contract_compile_all.sh" ]; then
          chmod +x tests/contract/contract_compile_all.sh
          ./tests/contract/contract_compile_all.sh
        else
          echo "‚ö†Ô∏è  Contract tests not found, skipping..."
        fi
        
    - name: "üîê Generate BRIK hash"
      run: |
        if [ -f "tests/contract/brik_hash.js" ]; then
          node tests/contract/brik_hash.js
        else
          echo "‚ö†Ô∏è  BRIK hash generator not found, using demo-py scripts..."
        fi
        
    - name: "üìä Generate final coverage report"
      working-directory: demo-py
      run: |
        chmod +x ./scripts/test-coverage.sh
        ./scripts/test-coverage.sh
        pytest --cov=src --cov-branch --cov-report=xml
        
    - name: "üîê BRIK Certification Hash (strict docs)"
      working-directory: demo-py
      run: |
        chmod +x ./scripts/brik-certify.sh
        STRICT_DOCS=1 ./scripts/brik-certify.sh
        
    - name: "‚úÖ Verify L3 coverage (100%)"
      working-directory: demo-py
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))" | awk '{print $1*100}')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= 99.0" | bc -l) )); then
          echo "‚úÖ L3 PASSED: Coverage $COVERAGE% ‚â• 99% (effectively 100%)"
        else
          echo "‚ùå L3 FAILED: Coverage $COVERAGE% < 99%"
          exit 1
        fi
        
    - name: "üéØ BRIK Certification Summary"
      working-directory: demo-py
      run: |
        echo "üèÜ BRIK L3 CERTIFICATION COMPLETE"
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))" | awk '{print $1*100}')
        echo "üìä Coverage: $COVERAGE%"
        echo "üîê BRIK Hash: $(cat .brik-cert.sha256 2>/dev/null || echo 'Not generated')"
        echo "‚úÖ Contract Tests: $([ -f '../tests/contract/contract_compile_all.sh' ] && echo 'PASSED' || echo 'SKIPPED')"
        echo "üìö Documentation: GENERATED"
        
    - name: "üì§ Upload final coverage to Codecov"
      uses: codecov/codecov-action@v4
      with:
        directory: demo-py
        flags: python-l3
        name: python-l3-coverage
        fail_ci_if_error: true
        
    - name: "üìã Upload coverage report"
      uses: actions/upload-artifact@v4
      with:
        name: python-coverage-report
        path: demo-py/htmlcov/
        
    - name: "üèÜ Upload BRIK certification"
      uses: actions/upload-artifact@v4
      with:
        name: demo-py-brik-cert
        path: |
          demo-py/.brik-cert.json
          demo-py/.brik-cert.sha256
