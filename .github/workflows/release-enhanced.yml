# 🚀 BRIK Semantic Release V1.0.0 Enhanced
# Automated semantic versioning, changelog generation, y release management
# Multi-language version synchronization con conventional commits

name: "🚀 BRIK Semantic Release Enhanced"

on:
  push:
    branches: 
      - main
      - v1.0.0-stabilization
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor  
        - major
        - prerelease
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production
  CI: true

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # 🔍 Pre-Release Validation
  pre-release-validation:
    name: "🔍 Pre-Release Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      version-bump: ${{ steps.version-check.outputs.bump }}
      should-release: ${{ steps.release-check.outputs.should_release }}
      current-version: ${{ steps.version-check.outputs.current }}
      
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "🟨 Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "📦 Install semantic-release tools"
      run: |
        echo "📦 Installing semantic-release dependencies..."
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
        npm install -g @semantic-release/commit-analyzer @semantic-release/release-notes-generator
        npm install -g conventional-changelog-conventionalcommits
        
    - name: "🔍 Validate commit messages"
      run: |
        echo "🔍 Validating conventional commit format..."
        
        # Check last 10 commits for conventional format
        git log --oneline -n 10 --pretty=format:"%s" | while read commit_msg; do
          if echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci)(\(.+\))?: .+"; then
            echo "✅ Valid: $commit_msg"
          else
            echo "⚠️ Non-conventional: $commit_msg"
          fi
        done
        
    - name: "📊 Analyze version bump"
      id: version-check
      run: |
        echo "📊 Analyzing required version bump..."
        
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./demo-ts/package.json').version")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Analyze commits for version bump type
        BUMP_TYPE="patch"
        
        # Check for breaking changes
        if git log --pretty=format:"%s %b" --since="$(git describe --tags --abbrev=0)" | grep -q "BREAKING CHANGE"; then
          BUMP_TYPE="major"
        # Check for features  
        elif git log --pretty=format:"%s" --since="$(git describe --tags --abbrev=0)" | grep -qE "^feat"; then
          BUMP_TYPE="minor"
        fi
        
        # Override with manual input if provided
        if [ "${{ github.event.inputs.release_type }}" != "" ]; then
          BUMP_TYPE="${{ github.event.inputs.release_type }}"
        fi
        
        echo "bump=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "🎯 Version bump type: $BUMP_TYPE (current: $CURRENT_VERSION)"
        
    - name: "🎯 Release readiness check"
      id: release-check
      run: |
        echo "🎯 Checking release readiness..."
        
        SHOULD_RELEASE="true"
        
        # Check if we're on a release branch
        if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != "refs/heads/v1.0.0-stabilization" ]]; then
          echo "⚠️ Not on release branch - skipping release"
          SHOULD_RELEASE="false"
        fi
        
        # Check for manual dry run
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          echo "🔍 Dry run mode - will validate but not release"
          SHOULD_RELEASE="dry_run"
        fi
        
        # Check for new commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        NEW_COMMITS=$(git rev-list ${LAST_TAG}..HEAD --count)
        
        if [ "$NEW_COMMITS" -eq "0" ]; then
          echo "⚠️ No new commits since last release"
          SHOULD_RELEASE="false"
        fi
        
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "🎯 Should release: $SHOULD_RELEASE (new commits: $NEW_COMMITS)"
        
    - name: "✅ Pre-release validation summary"
      run: |
        echo "## 🔍 Pre-Release Validation Summary"
        echo "- Current version: ${{ steps.version-check.outputs.current }}"
        echo "- Version bump: ${{ steps.version-check.outputs.bump }}"
        echo "- Should release: ${{ steps.release-check.outputs.should_release }}"
        echo "- Branch: ${{ github.ref }}"
        echo "- Trigger: ${{ github.event_name }}"

  # 🧪 Final Validation Suite
  final-validation:
    name: "🧪 Final Validation Suite"
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.should-release != 'false'
    timeout-minutes: 30
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "🦀 Setup Rust"
      uses: dtolnay/rust-toolchain@stable
      
    - name: "🟨 Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "🐍 Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'demo-py/requirements.txt'
        
    - name: "🧪 Run Rust validation"
      working-directory: demo-brik
      run: |
        echo "🧪 Running Rust final validation..."
        cargo test --release --all-features
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: "🧪 Run TypeScript validation"
      working-directory: demo-ts
      run: |
        echo "🧪 Running TypeScript final validation..."
        npm ci --prefer-offline --no-audit
        npm run lint
        npm run typecheck
        npm test
        npm run build
        
    - name: "🧪 Run Python validation"
      working-directory: demo-py
      run: |
        echo "🧪 Running Python final validation..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest ruff mypy
        pytest tests/ -v
        ruff check .
        
    - name: "🔐 Run security validation"
      run: |
        echo "🔐 Running final security validation..."
        
        # Rust security audit
        cd demo-brik
        cargo audit || echo "Rust audit completed"
        cd ..
        
        # Python security audit
        cd demo-py
        pip install bandit safety
        bandit -r src/ || echo "Bandit scan completed"
        safety check || echo "Safety check completed"
        cd ..
        
    - name: "✅ Final validation complete"
      run: |
        echo "✅ Final validation suite completed successfully"
        echo "- All tests passing"
        echo "- Security scans completed" 
        echo "- Ready for release"

  # 🔄 Version Synchronization
  version-sync:
    name: "🔄 Multi-Language Version Sync"
    runs-on: ubuntu-latest
    needs: [pre-release-validation, final-validation]
    if: needs.pre-release-validation.outputs.should-release != 'false'
    timeout-minutes: 15
    
    outputs:
      new-version: ${{ steps.version-update.outputs.new_version }}
      
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: "🟨 Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "📦 Install semantic-release"
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git
        npm install -g @semantic-release/commit-analyzer @semantic-release/release-notes-generator
        
    - name: "🔢 Calculate new version"
      id: version-update
      run: |
        echo "🔢 Calculating new version..."
        
        CURRENT_VERSION="${{ needs.pre-release-validation.outputs.current-version }}"
        BUMP_TYPE="${{ needs.pre-release-validation.outputs.version-bump }}"
        
        # Calculate new version using semantic versioning
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "$BUMP_TYPE" in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
          "prerelease")
            PATCH="$PATCH-rc.$(date +%Y%m%d%H%M)"
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "📊 Version update:"
        echo "- Current: $CURRENT_VERSION"
        echo "- New: $NEW_VERSION"
        echo "- Bump type: $BUMP_TYPE"
        
    - name: "🔄 Update package.json (TypeScript)"
      working-directory: demo-ts
      run: |
        echo "🔄 Updating TypeScript package.json..."
        npm version ${{ steps.version-update.outputs.new_version }} --no-git-tag-version
        
    - name: "🔄 Update Cargo.toml (Rust)"
      run: |
        echo "🔄 Updating Rust Cargo.toml files..."
        NEW_VERSION="${{ steps.version-update.outputs.new_version }}"
        
        # Update demo-brik
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" demo-brik/Cargo.toml
        
        # Update brik-factory-rust  
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" brik-factory-rust/Cargo.toml
        
    - name: "🔄 Update pyproject.toml (Python)"
      working-directory: demo-py
      run: |
        echo "🔄 Updating Python version..."
        NEW_VERSION="${{ steps.version-update.outputs.new_version }}"
        
        # Update version in setup.py or pyproject.toml if it exists
        if [ -f "pyproject.toml" ]; then
          sed -i "s/version = .*/version = \"$NEW_VERSION\"/" pyproject.toml
        fi
        
        # Create __version__.py for Python package
        echo "__version__ = \"$NEW_VERSION\"" > src/brik_demo/_version.py
        
    - name: "✅ Version sync complete"
      run: |
        echo "✅ Multi-language version synchronization complete"
        echo "- TypeScript package.json: ✅ Updated"
        echo "- Rust Cargo.toml files: ✅ Updated"  
        echo "- Python version files: ✅ Updated"
        echo "- New version: ${{ steps.version-update.outputs.new_version }}"

  # 📋 Release Generation
  semantic-release:
    name: "📋 Semantic Release Generation"
    runs-on: ubuntu-latest
    needs: [pre-release-validation, final-validation, version-sync]
    if: needs.pre-release-validation.outputs.should-release == 'true'
    timeout-minutes: 20
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: "🟨 Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: "📦 Install semantic-release"
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog @semantic-release/git @semantic-release/github
        npm install -g @semantic-release/commit-analyzer @semantic-release/release-notes-generator
        npm install -g conventional-changelog-conventionalcommits
        
    - name: "📝 Create release configuration"
      run: |
        echo "📝 Creating semantic-release configuration..."
        
        cat > .releaserc.json << 'EOF'
        {
          "branches": [
            "main",
            "v1.0.0-stabilization"
          ],
          "plugins": [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "conventionalcommits",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "docs", "release": "patch"},
                  {"type": "style", "release": "patch"},
                  {"type": "refactor", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "test", "release": "patch"},
                  {"type": "build", "release": "patch"},
                  {"type": "ci", "release": "patch"},
                  {"type": "chore", "release": "patch"},
                  {"breaking": true, "release": "major"}
                ]
              }
            ],
            [
              "@semantic-release/release-notes-generator",
              {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "types": [
                    {"type": "feat", "section": "✨ Features"},
                    {"type": "fix", "section": "🐛 Bug Fixes"},
                    {"type": "perf", "section": "⚡ Performance"},
                    {"type": "docs", "section": "📚 Documentation"},
                    {"type": "style", "section": "🎨 Code Style"},
                    {"type": "refactor", "section": "♻️ Refactoring"},
                    {"type": "test", "section": "🧪 Testing"},
                    {"type": "build", "section": "🏗️ Build System"},
                    {"type": "ci", "section": "🔧 CI/CD"},
                    {"type": "chore", "section": "🔨 Chores"}
                  ]
                }
              }
            ],
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md",
                "changelogTitle": "# 📋 BRIK Project Initializer Changelog\n\nAll notable changes to this project will be documented in this file. This project adheres to [Semantic Versioning](https://semver.org/).\n"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": [
                  "CHANGELOG.md",
                  "demo-ts/package.json",
                  "demo-ts/package-lock.json",
                  "demo-brik/Cargo.toml",
                  "brik-factory-rust/Cargo.toml",
                  "demo-py/pyproject.toml",
                  "demo-py/src/brik_demo/_version.py"
                ],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            [
              "@semantic-release/github",
              {
                "assets": [
                  {
                    "path": "demo-ts/dist/**",
                    "name": "typescript-dist-${nextRelease.gitTag}.zip"
                  },
                  {
                    "path": "demo-brik/target/release/demo-brik*",
                    "name": "rust-binary-${nextRelease.gitTag}"
                  }
                ]
              }
            ]
          ]
        }
        EOF
        
    - name: "🚀 Run semantic release"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🚀 Running semantic release..."
        npx semantic-release --debug
        
    - name: "🏆 Release summary"
      run: |
        echo "🏆 BRIK V1.0.0 SEMANTIC RELEASE COMPLETED"
        echo "- Changelog: ✅ Generated"
        echo "- Version tags: ✅ Created"  
        echo "- Release notes: ✅ Published"
        echo "- Artifacts: ✅ Uploaded"
        echo "- Multi-language sync: ✅ Completed"

  # 📊 Release Notification
  release-notification:
    name: "📊 Release Notification"
    runs-on: ubuntu-latest
    needs: [pre-release-validation, final-validation, version-sync, semantic-release]
    if: always()
    
    steps:
    - name: "📊 Generate release summary"
      run: |
        echo "## 🚀 BRIK Semantic Release Summary"
        echo "**Release Execution**: $(date -Iseconds)"
        echo ""
        
        if [ "${{ needs.semantic-release.result }}" == "success" ]; then
          echo "🏆 **Release Status**: ✅ SUCCESS"
          echo ""
          echo "### ✅ Completed Successfully"
          echo "- Pre-release validation: ${{ needs.pre-release-validation.result }}"
          echo "- Final validation suite: ${{ needs.final-validation.result }}"
          echo "- Version synchronization: ${{ needs.version-sync.result }}"
          echo "- Semantic release: ${{ needs.semantic-release.result }}"
          echo ""
          echo "### 📦 Release Details"
          echo "- **New Version**: ${{ needs.version-sync.outputs.new-version }}"
          echo "- **Version Bump**: ${{ needs.pre-release-validation.outputs.version-bump }}"
          echo "- **Branch**: ${{ github.ref }}"
          echo ""
          echo "### 🎯 Next Steps"
          echo "- ✅ Release is live on GitHub"
          echo "- ✅ Changelog updated"
          echo "- ✅ All language versions synchronized"
          echo "- 🎉 Ready for community adoption!"
        else
          echo "⚠️ **Release Status**: ❌ FAILED OR SKIPPED"
          echo ""
          echo "### 📋 Execution Results"
          echo "- Pre-release validation: ${{ needs.pre-release-validation.result }}"
          echo "- Final validation: ${{ needs.final-validation.result }}"
          echo "- Version sync: ${{ needs.version-sync.result }}"
          echo "- Semantic release: ${{ needs.semantic-release.result }}"
          echo ""
          echo "### 🔍 Investigation Required"
          echo "- Check workflow logs for specific errors"
          echo "- Verify conventional commit format"
          echo "- Ensure all tests are passing"
          echo "- Validate branch permissions"
        fi