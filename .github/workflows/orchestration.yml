# 🎼 BRIK Orchestration Workflow V1.0.0
# Master orchestrator para coordinar todos los workflows BRIK
# Garantiza ejecución ordenada y dependencies management

name: "🎼 BRIK Orchestration"

on:
  push:
    branches: [ main, develop, v1.0.0-stabilization ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      workflow_scope:
        description: 'Workflow execution scope'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - ci-only
        - contract-only
        - release-only
      force_release:
        description: 'Force release even if no changes'
        required: false
        default: false
        type: boolean
      skip_slow_tests:
        description: 'Skip slow performance tests'
        required: false
        default: false
        type: boolean

env:
  CI: true
  ORCHESTRATION_VERSION: "v1.0.0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🎯 Orchestration Planning
  orchestration-planning:
    name: "🎯 Orchestration Planning"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      should-run-ci: ${{ steps.plan.outputs.run_ci }}
      should-run-contracts: ${{ steps.plan.outputs.run_contracts }}
      should-run-release: ${{ steps.plan.outputs.run_release }}
      execution-strategy: ${{ steps.plan.outputs.strategy }}
      changed-components: ${{ steps.changes.outputs.components }}
      
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: "🔍 Detect changes"
      id: changes
      run: |
        echo "🔍 Detecting changed components..."
        
        CHANGED_COMPONENTS=""
        
        # Detect Rust changes
        if git diff --name-only HEAD~1 | grep -E "\.(rs|toml)$|Cargo\.(toml|lock)"; then
          CHANGED_COMPONENTS="$CHANGED_COMPONENTS,rust"
        fi
        
        # Detect TypeScript changes
        if git diff --name-only HEAD~1 | grep -E "\.(ts|tsx|js|jsx)$|package\.json|tsconfig\.json"; then
          CHANGED_COMPONENTS="$CHANGED_COMPONENTS,typescript"
        fi
        
        # Detect Python changes
        if git diff --name-only HEAD~1 | grep -E "\.py$|requirements\.txt|pyproject\.toml"; then
          CHANGED_COMPONENTS="$CHANGED_COMPONENTS,python"
        fi
        
        # Detect workflow changes
        if git diff --name-only HEAD~1 | grep -E "\.github/workflows/"; then
          CHANGED_COMPONENTS="$CHANGED_COMPONENTS,workflows"
        fi
        
        # Clean up leading comma
        CHANGED_COMPONENTS=$(echo "$CHANGED_COMPONENTS" | sed 's/^,//')
        
        echo "components=$CHANGED_COMPONENTS" >> $GITHUB_OUTPUT
        echo "🎯 Changed components: $CHANGED_COMPONENTS"
        
    - name: "📋 Create execution plan"
      id: plan
      run: |
        echo "📋 Creating orchestration execution plan..."
        
        SCOPE="${{ github.event.inputs.workflow_scope || 'full' }}"
        CHANGED="${{ steps.changes.outputs.components }}"
        
        # Determine what should run
        RUN_CI="false"
        RUN_CONTRACTS="false"  
        RUN_RELEASE="false"
        STRATEGY="parallel"
        
        case "$SCOPE" in
          "full")
            RUN_CI="true"
            RUN_CONTRACTS="true"
            if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/v1.0.0-stabilization" ]; then
              RUN_RELEASE="true"
            fi
            STRATEGY="sequential"
            ;;
          "ci-only")
            RUN_CI="true"
            STRATEGY="parallel"
            ;;
          "contract-only")
            RUN_CONTRACTS="true"
            STRATEGY="standalone"
            ;;
          "release-only")
            RUN_RELEASE="true"
            STRATEGY="standalone"
            ;;
        esac
        
        # Override based on changes (optimization)
        if [ -z "$CHANGED" ] && [ "${{ github.event.inputs.force_release }}" != "true" ]; then
          echo "⚠️ No significant changes detected, optimizing execution"
          RUN_CI="false"
          RUN_CONTRACTS="false"
          RUN_RELEASE="false"
        fi
        
        # Force release if requested
        if [ "${{ github.event.inputs.force_release }}" == "true" ]; then
          RUN_RELEASE="true"
        fi
        
        echo "run_ci=$RUN_CI" >> $GITHUB_OUTPUT
        echo "run_contracts=$RUN_CONTRACTS" >> $GITHUB_OUTPUT
        echo "run_release=$RUN_RELEASE" >> $GITHUB_OUTPUT
        echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
        
        echo "📊 Execution Plan:"
        echo "- Scope: $SCOPE"
        echo "- Strategy: $STRATEGY"
        echo "- CI/CD: $RUN_CI"
        echo "- Contracts: $RUN_CONTRACTS"
        echo "- Release: $RUN_RELEASE"
        echo "- Changed: $CHANGED"
        
    - name: "✅ Planning complete"
      run: |
        echo "✅ Orchestration planning completed"
        echo "🎯 Ready to execute coordinated workflow pipeline"

  # 🚀 CI/CD Execution (Parallel)
  ci-cd-execution:
    name: "🚀 CI/CD Multi-Language"
    needs: orchestration-planning
    if: needs.orchestration-planning.outputs.should-run-ci == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        workflow: [
          { name: "Rust Enhanced", file: "brik-rust-enhanced.yml" },
          { name: "TypeScript Enhanced", file: "brik-ts-enhanced.yml" }, 
          { name: "Python Enhanced", file: "brik-python-enhanced.yml" }
        ]
    
    uses: ./.github/workflows/${{ matrix.workflow.file }}
    secrets: inherit

  # 🔍 Contract Testing Execution
  contract-testing:
    name: "🔍 Contract Testing"
    needs: [orchestration-planning, ci-cd-execution]
    if: always() && needs.orchestration-planning.outputs.should-run-contracts == 'true'
    
    uses: ./.github/workflows/contract-tests-enhanced.yml
    secrets: inherit

  # 📊 Quality Gate Assessment  
  quality-gate:
    name: "📊 Quality Gate Assessment"
    runs-on: ubuntu-latest
    needs: [orchestration-planning, ci-cd-execution, contract-testing]
    if: always() && (needs.ci-cd-execution.result != 'skipped' || needs.contract-testing.result != 'skipped')
    timeout-minutes: 10
    
    outputs:
      quality-score: ${{ steps.assessment.outputs.score }}
      gate-passed: ${{ steps.assessment.outputs.passed }}
      
    steps:
    - name: "📊 Assess quality metrics"
      id: assessment
      run: |
        echo "📊 Assessing overall quality gate..."
        
        CI_RESULT="${{ needs.ci-cd-execution.result }}"
        CONTRACT_RESULT="${{ needs.contract-testing.result }}"
        
        SCORE=0
        MAX_SCORE=100
        
        # CI/CD Results (60 points)
        if [ "$CI_RESULT" == "success" ]; then
          SCORE=$((SCORE + 60))
          echo "✅ CI/CD: +60 points"
        elif [ "$CI_RESULT" == "skipped" ]; then
          echo "⚠️ CI/CD: skipped"
        else
          echo "❌ CI/CD: 0 points"
        fi
        
        # Contract Testing (40 points)
        if [ "$CONTRACT_RESULT" == "success" ]; then
          SCORE=$((SCORE + 40))
          echo "✅ Contract Testing: +40 points"
        elif [ "$CONTRACT_RESULT" == "skipped" ]; then
          echo "⚠️ Contract Testing: skipped"
        else
          echo "❌ Contract Testing: 0 points"
        fi
        
        # Quality Gate Assessment
        GATE_PASSED="false"
        if [ $SCORE -ge 80 ]; then
          GATE_PASSED="true"
          echo "🏆 Quality Gate: PASSED ($SCORE/$MAX_SCORE)"
        else
          echo "❌ Quality Gate: FAILED ($SCORE/$MAX_SCORE)"
        fi
        
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "passed=$GATE_PASSED" >> $GITHUB_OUTPUT
        
    - name: "📋 Quality report"
      run: |
        echo "## 📊 BRIK Quality Gate Report"
        echo "**Assessment Time**: $(date -Iseconds)"
        echo ""
        echo "### 🎯 Results Summary"
        echo "- **Overall Score**: ${{ steps.assessment.outputs.score }}/100"
        echo "- **Gate Status**: ${{ steps.assessment.outputs.passed == 'true' && '✅ PASSED' || '❌ FAILED' }}"
        echo ""
        echo "### 📈 Component Results"
        echo "- CI/CD Multi-Language: ${{ needs.ci-cd-execution.result }}"
        echo "- Contract Testing: ${{ needs.contract-testing.result }}"
        echo ""
        if [ "${{ steps.assessment.outputs.passed }}" == "true" ]; then
          echo "### 🚀 Next Steps"
          echo "- Quality gate passed"
          echo "- Ready for release pipeline"
          echo "- All validation criteria met"
        else
          echo "### 🔧 Required Actions"  
          echo "- Review failed components"
          echo "- Fix quality issues"
          echo "- Re-run validation pipeline"
        fi

  # 🚀 Release Execution
  release-execution:
    name: "🚀 Release Pipeline"
    needs: [orchestration-planning, quality-gate]
    if: always() && needs.orchestration-planning.outputs.should-run-release == 'true' && needs.quality-gate.outputs.gate-passed == 'true'
    
    uses: ./.github/workflows/release-enhanced.yml
    secrets: inherit

  # 🏆 Orchestration Summary
  orchestration-summary:
    name: "🏆 Orchestration Summary"
    runs-on: ubuntu-latest
    needs: [orchestration-planning, ci-cd-execution, contract-testing, quality-gate, release-execution]
    if: always()
    
    steps:
    - name: "🏆 Generate comprehensive summary"
      run: |
        echo "## 🎼 BRIK Orchestration Summary"
        echo "**Execution Time**: $(date -Iseconds)"
        echo "**Branch**: ${{ github.ref }}"
        echo "**Trigger**: ${{ github.event_name }}"
        echo ""
        
        echo "### 📋 Execution Plan"
        echo "- **Scope**: ${{ github.event.inputs.workflow_scope || 'full' }}"
        echo "- **Strategy**: ${{ needs.orchestration-planning.outputs.execution-strategy }}"
        echo "- **Changed Components**: ${{ needs.orchestration-planning.outputs.changed-components || 'none' }}"
        echo ""
        
        echo "### 🎯 Pipeline Results"
        echo "- **Planning**: ${{ needs.orchestration-planning.result }}"
        echo "- **CI/CD Multi-Language**: ${{ needs.ci-cd-execution.result }}"
        echo "- **Contract Testing**: ${{ needs.contract-testing.result }}"
        echo "- **Quality Gate**: ${{ needs.quality-gate.result }} (Score: ${{ needs.quality-gate.outputs.quality-score || 'N/A' }})"
        echo "- **Release Pipeline**: ${{ needs.release-execution.result }}"
        echo ""
        
        # Overall Status
        OVERALL_SUCCESS="true"
        
        if [ "${{ needs.orchestration-planning.result }}" == "failure" ]; then
          OVERALL_SUCCESS="false"
        fi
        
        if [ "${{ needs.ci-cd-execution.result }}" == "failure" ]; then
          OVERALL_SUCCESS="false"
        fi
        
        if [ "${{ needs.contract-testing.result }}" == "failure" ]; then
          OVERALL_SUCCESS="false"
        fi
        
        if [ "${{ needs.quality-gate.result }}" == "failure" ]; then
          OVERALL_SUCCESS="false"
        fi
        
        if [ "${{ needs.release-execution.result }}" == "failure" ]; then
          OVERALL_SUCCESS="false"
        fi
        
        if [ "$OVERALL_SUCCESS" == "true" ]; then
          echo "### 🏆 Overall Status: ✅ SUCCESS"
          echo ""
          echo "🎉 **BRIK V1.0.0 Pipeline Completed Successfully!**"
          echo ""
          echo "### ✅ Achievements"
          echo "- Multi-language CI/CD validation"
          echo "- Cross-language contract testing"
          echo "- Quality gate compliance"
          if [ "${{ needs.release-execution.result }}" == "success" ]; then
            echo "- Semantic release deployment"
          fi
          echo ""
          echo "### 🚀 Status"
          echo "- **Enterprise Ready**: ✅"
          echo "- **L3 Certified**: ✅"
          echo "- **Production Deployment**: ✅"
        else
          echo "### ⚠️ Overall Status: ❌ ISSUES DETECTED"
          echo ""
          echo "### 🔍 Investigation Required"
          echo "- Review individual workflow results"
          echo "- Address any failed components"
          echo "- Re-run pipeline after fixes"
        fi
        
        echo ""
        echo "---"
        echo "*BRIK Orchestration V1.0.0 - Enterprise Multi-Language Project Generator*"
        
    - name: "📊 Performance metrics"
      run: |
        echo "## 📊 Pipeline Performance Metrics"
        
        START_TIME="${{ github.event.head_commit.timestamp }}"
        CURRENT_TIME=$(date -Iseconds)
        
        echo "- **Pipeline Duration**: $(date -d "$CURRENT_TIME" +%s) - $(date -d "$START_TIME" +%s) seconds"
        echo "- **Workflows Executed**: ${{ (needs.ci-cd-execution.result != 'skipped' && '3') || '0' }} CI/CD + ${{ (needs.contract-testing.result != 'skipped' && '1') || '0' }} Contract + ${{ (needs.release-execution.result != 'skipped' && '1') || '0' }} Release"
        echo "- **Quality Score**: ${{ needs.quality-gate.outputs.quality-score || 'N/A' }}/100"
        
        if [ "${{ needs.quality-gate.outputs.gate-passed }}" == "true" ]; then
          echo "- **Quality Gate**: ✅ PASSED"
        else
          echo "- **Quality Gate**: ❌ FAILED"
        fi
        
    - name: "🎯 Next steps recommendation"
      run: |
        echo "## 🎯 Recommended Next Steps"
        
        if [ "${{ needs.quality-gate.outputs.gate-passed }}" == "true" ]; then
          if [ "${{ needs.release-execution.result }}" == "success" ]; then
            echo "🎉 **Release Completed Successfully**"
            echo "- Monitor production deployment"
            echo "- Update documentation if needed"
            echo "- Engage with community feedback"
          elif [ "${{ needs.release-execution.result }}" == "skipped" ]; then
            echo "🚀 **Ready for Release**"
            echo "- Consider creating release when ready"
            echo "- All quality gates passed"
            echo "- Pipeline is production-ready"
          fi
        else
          echo "🔧 **Quality Gate Failed**"
          echo "- Review and fix failing components"
          echo "- Improve test coverage if needed"
          echo "- Address contract testing issues"
          echo "- Re-run pipeline after fixes"
        fi