# ‚ö° BRIK TypeScript CI/CD Pipeline
# Niveles de Certificaci√≥n: L0‚ÜíL1‚ÜíL2‚ÜíL3
# Fleet-Coordinator: Workflow optimizado para m√°xima calidad

name: "‚ö° BRIK TypeScript"

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/package.json'
      - '**/package-lock.json'
      - '**/tsconfig.json'
      - '.github/workflows/brik-ts.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/package.json'
      - '**/package-lock.json'
      - '**/tsconfig.json'
      - '.github/workflows/brik-ts.yml'

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  CI: true

jobs:
  # üéØ GATE L0: Tests B√°sicos + Cobertura ‚â•70%
  level-0-basic:
    name: "üéØ L0: Basic Tests (‚â•70% coverage)"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node: [18, 20]
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "‚ö° Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-ts
      run: |
        npm ci
        
    - name: "üß™ Run tests"
      working-directory: demo-ts
      run: |
        npm test
        
    - name: "üìä Generate coverage report"
      working-directory: demo-ts
      run: |
        npx jest --coverage --coverageReporters=cobertura --coverageReporters=text
        
    - name: "‚úÖ Verify L0 coverage (‚â•70%)"
      working-directory: demo-ts
      run: |
        COVERAGE=$(npx jest --coverage --silent 2>/dev/null | grep "All files" | awk -F'|' '{print $2}' | head -1)
        # Extrae el n√∫mero usando regex y elimina caracteres ANSI y %
        COVERAGE=$(echo "$COVERAGE" | sed 's/\x1b\[[0-9;]*m//g' | grep -oE '[0-9]+' | head -1)
        
        echo "Coverage for demo-ts: ${COVERAGE}%"
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" -eq 0 ]; then
          echo "‚ö†Ô∏è Could not extract coverage, checking jest output..."
          npm test -- --coverage --watchAll=false --verbose
          exit 1
        elif [ "$COVERAGE" -ge 70 ]; then
          echo "‚úÖ L0 PASSED: Coverage ${COVERAGE}% ‚â• 70%"
        else
          echo "‚ùå L0 FAILED: Coverage ${COVERAGE}% < 70%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      if: matrix.node == '20'
      uses: codecov/codecov-action@v4
      with:
        directory: demo-ts/coverage
        flags: typescript-l0
        name: typescript-l0-coverage

  # üîç GATE L1: Lint + Typecheck + Cobertura ‚â•80%  
  level-1-lint:
    name: "üîç L1: Lint + Typecheck (‚â•80% coverage)"
    runs-on: ubuntu-latest
    needs: level-0-basic
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "‚ö° Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-ts
      run: |
        npm ci
        
    - name: "üìè Run ESLint (linting)"
      working-directory: demo-ts
      run: |
        npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
        
    - name: "üîç TypeScript type checking"
      working-directory: demo-ts
      run: |
        npx tsc --noEmit
        
    - name: "üé® Check Prettier formatting"
      working-directory: demo-ts
      run: |
        npx prettier --check .
        
    - name: "üìä Generate coverage report L1"
      working-directory: demo-ts
      run: |
        npx jest --coverage --coverageReporters=cobertura --coverageReporters=text
        
    - name: "‚úÖ Verify L1 coverage (‚â•80%)"
      working-directory: demo-ts
      run: |
        COVERAGE=$(npx jest --coverage --silent 2>/dev/null | grep "All files" | awk -F'|' '{print $2}' | head -1)
        # Extrae el n√∫mero usando regex y elimina caracteres ANSI y %
        COVERAGE=$(echo "$COVERAGE" | sed 's/\x1b\[[0-9;]*m//g' | grep -oE '[0-9]+' | head -1)
        
        echo "Coverage for demo-ts: ${COVERAGE}%"
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" -eq 0 ]; then
          echo "‚ö†Ô∏è Could not extract coverage, checking jest output..."
          npm test -- --coverage --watchAll=false --verbose
          exit 1
        elif [ "$COVERAGE" -ge 80 ]; then
          echo "‚úÖ L1 PASSED: Coverage ${COVERAGE}% ‚â• 80%"
        else
          echo "‚ùå L1 FAILED: Coverage ${COVERAGE}% < 80%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      uses: codecov/codecov-action@v4
      with:
        directory: demo-ts/coverage
        flags: typescript-l1
        name: typescript-l1-coverage

  # üèóÔ∏è GATE L2: CI Completo + Docs + Cobertura ‚â•90%
  level-2-complete:
    name: "üèóÔ∏è L2: Complete CI + Docs (‚â•90% coverage)"
    runs-on: ubuntu-latest
    needs: level-1-lint
    
    strategy:
      matrix:
        node: [18, 20, 21]
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "‚ö° Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-ts
      run: |
        npm ci
        
    - name: "üèóÔ∏è Build project"
      working-directory: demo-ts
      run: |
        npm run build
        
    - name: "üß™ Run comprehensive tests"
      working-directory: demo-ts
      run: |
        npm test -- --verbose
        
    - name: "üìö Generate documentation"
      if: matrix.node == '20' && matrix.os == 'ubuntu-latest'
      working-directory: demo-ts
      run: |
        npm run docs
        
    - name: "üìä Generate coverage report L2"
      if: matrix.node == '20' && matrix.os == 'ubuntu-latest'
      working-directory: demo-ts
      run: |
        npx jest --coverage --coverageReporters=cobertura --coverageReporters=html --coverageReporters=text
        
    - name: "‚úÖ Verify L2 coverage (‚â•90%)"
      if: matrix.node == '20' && matrix.os == 'ubuntu-latest'
      working-directory: demo-ts
      run: |
        COVERAGE=$(npx jest --coverage --silent 2>/dev/null | grep "All files" | awk -F'|' '{print $2}' | head -1)
        # Extrae el n√∫mero usando regex y elimina caracteres ANSI y %
        COVERAGE=$(echo "$COVERAGE" | sed 's/\x1b\[[0-9;]*m//g' | grep -oE '[0-9]+' | head -1)
        
        echo "Coverage for demo-ts: ${COVERAGE}%"
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" -eq 0 ]; then
          echo "‚ö†Ô∏è Could not extract coverage, checking jest output..."
          npm test -- --coverage --watchAll=false --verbose
          exit 1
        elif [ "$COVERAGE" -ge 90 ]; then
          echo "‚úÖ L2 PASSED: Coverage ${COVERAGE}% ‚â• 90%"
        else
          echo "‚ùå L2 FAILED: Coverage ${COVERAGE}% < 90%"
          exit 1
        fi
        
    - name: "üì§ Upload coverage to Codecov"
      if: matrix.node == '20' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: demo-ts/coverage
        flags: typescript-l2
        name: typescript-l2-coverage

  # üèÜ GATE L3: Contract Tests + BRIK Hash + Cobertura 100%
  level-3-certification:
    name: "üèÜ L3: BRIK Certification (100% coverage)"
    runs-on: ubuntu-latest
    needs: level-2-complete
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: "üì• Checkout code"
      uses: actions/checkout@v4
      
    - name: "‚ö° Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'demo-ts/package-lock.json'
        
    - name: "üì¶ Install dependencies"
      working-directory: demo-ts
      run: |
        npm ci
        
    - name: "üß™ Run contract tests"
      run: |
        if [ -f "tests/contract/contract_compile_all.sh" ]; then
          chmod +x tests/contract/contract_compile_all.sh
          ./tests/contract/contract_compile_all.sh
        else
          echo "‚ö†Ô∏è  Contract tests not found, skipping..."
        fi
        
    - name: "üîê Generate BRIK hash"
      run: |
        if [ -f "tests/contract/brik_hash.js" ]; then
          node tests/contract/brik_hash.js
        else
          echo "‚ö†Ô∏è  BRIK hash generator not found, using demo-ts scripts..."
        fi
        
    - name: "üìä Generate final coverage report"
      working-directory: demo-ts
      run: |
        chmod +x ./scripts/test-coverage.sh
        ./scripts/test-coverage.sh
        npx jest --coverage --coverageReporters=cobertura
        
    - name: "üîê BRIK Certification Hash (strict docs)"
      working-directory: demo-ts
      run: |
        chmod +x ./scripts/brik-certify.sh
        STRICT_DOCS=1 ./scripts/brik-certify.sh
        
    - name: "‚úÖ Verify L3 coverage (100%)"
      working-directory: demo-ts
      run: |
        COVERAGE=$(npx jest --coverage --silent 2>/dev/null | grep "All files" | awk -F'|' '{print $2}' | head -1)
        # Extrae el n√∫mero usando regex y elimina caracteres ANSI y %
        COVERAGE=$(echo "$COVERAGE" | sed 's/\x1b\[[0-9;]*m//g' | grep -oE '[0-9]+' | head -1)
        
        echo "Coverage for demo-ts: ${COVERAGE}%"
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" -eq 0 ]; then
          echo "‚ö†Ô∏è Could not extract coverage, checking jest output..."
          npm test -- --coverage --watchAll=false --verbose
          exit 1
        elif [ "$COVERAGE" -ge 99 ]; then
          echo "‚úÖ L3 PASSED: Coverage ${COVERAGE}% ‚â• 99% (effectively 100%)"
        else
          echo "‚ùå L3 FAILED: Coverage ${COVERAGE}% < 99%"
          exit 1
        fi
        
    - name: "üéØ BRIK Certification Summary"
      working-directory: demo-ts
      run: |
        echo "üèÜ BRIK L3 CERTIFICATION COMPLETE"
        COVERAGE=$(npx jest --coverage --silent 2>/dev/null | grep "All files" | awk -F'|' '{print $2}' | head -1)
        # Extrae el n√∫mero usando regex y elimina caracteres ANSI y %
        COVERAGE=$(echo "$COVERAGE" | sed 's/\x1b\[[0-9;]*m//g' | grep -oE '[0-9]+' | head -1)
        echo "üìä Coverage: $COVERAGE%"
        echo "üîê BRIK Hash: $(cat .brik-cert.sha256 2>/dev/null || echo 'Not generated')"
        echo "‚úÖ Contract Tests: $([ -f '../tests/contract/contract_compile_all.sh' ] && echo 'PASSED' || echo 'SKIPPED')"
        echo "üìö Documentation: GENERATED"
        
    - name: "üì§ Upload final coverage to Codecov"
      uses: codecov/codecov-action@v4
      with:
        directory: demo-ts/coverage
        flags: typescript-l3
        name: typescript-l3-coverage
        fail_ci_if_error: true
        
    - name: "üìã Upload coverage report"
      uses: actions/upload-artifact@v4
      with:
        name: typescript-coverage-report
        path: demo-ts/coverage
        
    - name: "üèÜ Upload BRIK certification"
      uses: actions/upload-artifact@v4
      with:
        name: demo-ts-brik-cert
        path: |
          demo-ts/.brik-cert.json
          demo-ts/.brik-cert.sha256
