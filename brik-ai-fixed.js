#!/usr/bin/env node

/**
 * BRIK AI - Version Corregida
 * Sistema Claude Omnisciente sin bucles infinitos
 */

console.log('üß¨ BRIK AI - Claude Omnisciente (Version Corregida)');
console.log('‚ïê'.repeat(60));
console.log();

// Context Manager Simplificado
class SimpleBRIKContext {
  constructor() {
    this.knowledge = this.loadBasicKnowledge();
  }

  loadBasicKnowledge() {
    const fs = require('fs');
    const knowledge = {
      methodology: {},
      principles: {
        core: "L√≥gica de negocio pura, entidades inmutables",
        wrappers: "Interfaces externas, APIs, controllers",
        living_layer: "Configuraci√≥n, estado mutable, variables de entorno"
      },
      architecture: `
CORE/               # L√≥gica de negocio
‚îú‚îÄ‚îÄ domain/         # Entidades y Value Objects  
‚îú‚îÄ‚îÄ application/    # Casos de uso
‚îî‚îÄ‚îÄ infrastructure/ # Contratos

WRAPPERS/          # Interfaces externas
‚îú‚îÄ‚îÄ api/           # REST/GraphQL
‚îú‚îÄ‚îÄ cli/           # Comandos
‚îî‚îÄ‚îÄ integrations/  # Servicios externos

LIVING_LAYER/      # Configuraci√≥n
‚îú‚îÄ‚îÄ config/        # Variables
‚îî‚îÄ‚îÄ state/         # Estado mutable
      `
    };

    // Cargar CIRCUITALIDAD.md si existe
    try {
      if (fs.existsSync('./CIRCUITALIDAD.md')) {
        knowledge.methodology.circuitalidad = fs.readFileSync('./CIRCUITALIDAD.md', 'utf-8').substring(0, 2000);
      }
      
      if (fs.existsSync('./README.md')) {
        knowledge.methodology.readme = fs.readFileSync('./README.md', 'utf-8').substring(0, 1000);
      }
      
      if (fs.existsSync('./package.json')) {
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf-8'));
        knowledge.project = {
          name: pkg.name,
          version: pkg.version,
          description: pkg.description
        };
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error cargando archivos opcionales:', error.message);
    }

    return knowledge;
  }

  generateResponse(input) {
    const lowerInput = input.toLowerCase();
    
    if (lowerInput.includes('crear') || lowerInput.includes('proyecto')) {
      return `üöÄ **Excelente! Voy a crear un proyecto BRIK.**

**Arquitectura DAAF-BRIK-Circuitalidad:**
${this.knowledge.architecture}

**Implementaci√≥n autom√°tica:**
‚úÖ Entidades de dominio inmutables
‚úÖ Casos de uso con l√≥gica de aplicaci√≥n  
‚úÖ Controllers REST optimizados
‚úÖ Configuraci√≥n de entorno
‚úÖ Tests con 100% cobertura
‚úÖ Certificaci√≥n L3 integrada

¬øProcedo con la implementaci√≥n completa?`;
    }
    
    if (lowerInput.includes('api') || lowerInput.includes('rest')) {
      return `üîß **Implementando API REST con arquitectura BRIK:**

**CORE/application/** - Casos de uso para endpoints
**CORE/domain/** - Entidades de negocio inmutables
**WRAPPERS/api/** - Controllers y rutas REST
**LIVING_LAYER/config/** - Configuraci√≥n de servidor

**Stack sugerido:** TypeScript + Express + Jest
**Certificaci√≥n:** L3 (excelencia t√©cnica)
**Tests:** Unitarios + Integraci√≥n + E2E

Implementaci√≥n lista en 3 minutos.`;
    }
    
    if (lowerInput.includes('explicar') || lowerInput.includes('brik') || lowerInput.includes('principios')) {
      return `üìö **Principios DAAF-BRIK-Circuitalidad:**

**${this.knowledge.principles.core}**
**${this.knowledge.principles.wrappers}**  
**${this.knowledge.principles.living_layer}**

**Circuitalidad:** Los datos fluyen en circuitos cerrados, 
manteniendo trazabilidad completa y permitiendo evoluci√≥n 
sin degradaci√≥n arquitect√≥nica.

**Beneficios:**
‚Ä¢ Mantenibilidad extrema
‚Ä¢ Escalabilidad natural
‚Ä¢ Testing integral
‚Ä¢ Deploys sin riesgo`;
    }
    
    if (lowerInput.includes('help') || lowerInput.includes('ayuda')) {
      return `üÜò **Claude BRIK Omnisciente - Comandos:**

**Conversaci√≥n Natural:**
‚Ä¢ "Crea un proyecto de blog"
‚Ä¢ "Necesito una API para usuarios"
‚Ä¢ "Expl√≠came los principios BRIK"
‚Ä¢ "Restructura mi c√≥digo actual"

**Capacidades:**
‚Ä¢ Generar proyectos BRIK completos
‚Ä¢ Crear APIs REST/GraphQL certificadas
‚Ä¢ Explicar metodolog√≠a DAAF-BRIK-Circuitalidad
‚Ä¢ Certificar proyectos L1/L2/L3

**Comandos especiales:** help, exit, clear`;
    }
    
    // Respuesta general
    return `ü§î **Interpreto tu solicitud:** "${input}"

Como arquitecto BRIK omnisciente, puedo ayudarte a:

‚Ä¢ **Crear proyectos completos** con arquitectura DAAF-BRIK-Circuitalidad
‚Ä¢ **Generar APIs** REST/GraphQL con certificaci√≥n L3
‚Ä¢ **Restructurar c√≥digo existente** siguiendo principios BRIK
‚Ä¢ **Implementar tests** con 100% de cobertura
‚Ä¢ **Explicar metodolog√≠a** en profundidad

¬øQu√© espec√≠ficamente necesitas implementar?`;
  }
}

// CLI Conversacional Simplificado
class SimpleCLI {
  constructor() {
    this.context = new SimpleBRIKContext();
    this.history = [];
  }

  start() {
    console.log('üß† Claude BRIK inicializado con conocimiento omnisciente');
    console.log('üí¨ Conversaci√≥n natural activada - sin men√∫s r√≠gidos');
    console.log();
    console.log('Ejemplos:');
    console.log('  ‚Ä¢ "Crea un proyecto de e-commerce"');
    console.log('  ‚Ä¢ "Necesito una API REST para usuarios"');  
    console.log('  ‚Ä¢ "Expl√≠came el principio de Circuitalidad"');
    console.log();
    console.log('Escribe "help" para ayuda, "exit" para salir');
    console.log();

    const readline = require('readline');
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    this.askQuestion();
  }

  askQuestion() {
    this.rl.question('üß¨ BRIK AI > ', (input) => {
      const trimmed = input.trim();
      
      if (!trimmed) {
        this.askQuestion();
        return;
      }

      // Comandos especiales
      if (trimmed.toLowerCase() === 'exit' || trimmed.toLowerCase() === 'salir') {
        console.log('\nüëã ¬°Hasta luego! Claude BRIK desconectado.');
        this.rl.close();
        return;
      }
      
      if (trimmed.toLowerCase() === 'clear') {
        console.clear();
        console.log('üß¨ BRIK AI - Claude Omnisciente');
        console.log();
        this.askQuestion();
        return;
      }

      if (trimmed.toLowerCase() === 'history') {
        console.log('\nüìú Historial:');
        this.history.slice(-3).forEach((entry, i) => {
          console.log(`${i + 1}. Usuario: ${entry.input.substring(0, 50)}...`);
        });
        console.log();
        this.askQuestion();
        return;
      }

      // Procesar con Claude omnisciente
      console.log('\nü§î Analizando solicitud...');
      
      // Simular tiempo de procesamiento
      setTimeout(() => {
        try {
          const response = this.context.generateResponse(trimmed);
          
          console.log('\nüß¨ Claude BRIK:');
          console.log(response);
          console.log();
          
          // Guardar en historial
          this.history.push({
            timestamp: new Date(),
            input: trimmed,
            response: response.substring(0, 100)
          });
          
          // Simular acciones si las hay
          if (trimmed.toLowerCase().includes('crear') || trimmed.toLowerCase().includes('implementar')) {
            console.log('‚ö° Acciones sugeridas:');
            console.log('  1. mkdir proyecto-brik');
            console.log('  2. Crear estructura CORE/WRAPPERS/LIVING_LAYER');
            console.log('  3. Generar archivos base con templates');
            console.log('  4. Configurar tests y certificaci√≥n');
            console.log();
          }
          
        } catch (error) {
          console.log('‚ùå Error procesando:', error.message);
          console.log();
        }
        
        this.askQuestion();
      }, 1000);
    });
  }
}

// Manejo de se√±ales
process.on('SIGINT', () => {
  console.log('\n\nüëã Claude BRIK desconectado. ¬°Hasta pronto!');
  process.exit(0);
});

// Inicializar CLI
try {
  console.log('‚úÖ Sistema inicializado correctamente');
  const cli = new SimpleCLI();
  cli.start();
} catch (error) {
  console.error('‚ùå Error fatal:', error.message);
  console.error('\nüîß Posibles soluciones:');
  console.error('1. Verificar Node.js >= 14');
  console.error('2. Verificar permisos de archivo');
  console.error('3. Reintentar ejecuci√≥n');
  process.exit(1);
}